/*	Name: TwoPhotonGui.h
	Description: Provides functionality for Qt-based GUI
	Written by: Alex Greis
	
	Functional Optical Imaging Laboratory
	Department of Biomedical Engineering
	University of Texas at Austin
	Austin, TX 78712
	
	Created:	9/4/08
	Updated:	
*/ 

#ifndef TWOPHOTONGUI_H
#define TWOPHOTONGUI_H

#include <QMainWindow>
#include <QWidget>

#include "ui_TwoPhoton.h"		//generated by UIC from Two-Photon.ui 
#include "2pData.h"
#include "acqengine.h"
#include "aomControl.h"
#include "stepperDriver.h"
#include "scanengine.h"
#include "lifetimeacq.h"
#include "zStepDriver.h"
#include "AcqThread.h"


#include <qwt.h>
#include <qwt_plot.h>
#include <QSignalMapper>

#include "nivision.h"

#define DAQmxErrChk(functionCall) { if( DAQmxFailed(error=(functionCall)) ) { goto Error; } } 


class TwoPhotonGui : public QMainWindow, public Ui::TwoPhotonMainWindow
{
	Q_OBJECT

public:
	//Constructor
	TwoPhotonGui(QWidget * parent = 0);

	//Destructor
	~TwoPhotonGui();

	//----------------------------------------------------------------------------------------
	// Slots ---------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------
	public slots:

		//User Input Slots----------------------------------------
		void aboutTwoPhoton();
		void defaultHwConnections();
		void viewVisionTools();
		void viewImageOne();
		void viewImageTwo();
		void updateDataFile();
		void updateAcqEng();
		void updateAomControl();
		void updateScanEng();
		void updateZStepEng();
		void Acquire();
		void ScanDrive();
		void LineScanAcq();
		void changeDir();
		void AcqLifetimeData();
		void StopScanDrive();
		void AomControlOn();
		void AomControlUpdate();
		void AomControlOff();
		void updateLineRateField();
		void UpdateLineScanSpeed();
		void UpdateMemoryNeeded();
		void UnlockContScanControlWidgets();
		void ContAcqCallback();
		void StopContAcqCallback();
		void parkBeam();
		void updateIntensityScaling();
		void updateIntensityScalingFields();
		void updateAomTimer();
		void updateNumZSteps();
		void saveImageLoc();
		void savePointLoc();
		void goToLoc();
		void zSetOrigin();
		void stopAcq();
		void connectZCom();
		void connectXYCom();
		void lockControlWidgets();
		void unlockControlWidgets();
		void setXYOrigin();
		void coarseUp();
		void coarseDown();
		void coarseLeft();
		void coarseRight();
		void fineUp();
		void fineDown();
		void fineLeft();
		void fineRight();
		void zStepUp();
		void zStepDown();
		void zMoveTo();
		void rotateGalvos();
                void resetLTAcqNum();


		//Program input slots------------------------------
		void updateGuiLineRateField(double lineRate, double frameTime);
		void UpdateGuiLineScanSpeed(double lineSpeed);
		void UpdateGuiMemoryNeeded(double memNeeded);
		void popupMessage(QString title,QString message);
		void setScanButton(bool on);
		void setStopButton(bool on);
		void setStopAcqButton(bool on);
		void setChkAomPulsed(bool checked);
		void setChkAomCont(bool checked);
		void setChkSave(bool checked);
		void setAomOnButton(bool on);
		void setAomOffButton(bool on);
		void updateScalingField(int xFov,int yFov,double xRes, double yRes);
		void setAomIntScalingVals(double bottom, double top);
		void finishContAcq();
		void updateScalingInt(short ch1Min,short ch1Max,short ch2Min,short ch2Max);
		void updateNumZStepsField(int numZSteps);
		void addSavedLoc(QTreeWidgetItem* entry, int type);
		void setCoarseStepField(double size);
		void setFineStepField(double size);
		void setZMoveToField(double z);
		void setZPos(double z);
		void setXPos(double x);
		void setYPos(double y);
		void setLocTree(QTreeWidget* tree);
		void addMagEntry(int numObj,char* string, int data);
		void setXYCom(int port);
		void setZCom(int port);
		void updateScaling();
		void clearLog();
		void processLogText(QString text);
		void receivePercentComplete(double percent);
		void updateScanProgressBar(double percent);
		void toggleAomWidgets(bool aomOn);
		void receivePort(int port);
		void updZPos(float zPos);
                void updateLifeTimeAcqNumber(int number);

	//----------------------------------------------------------------------------------------
	// Signals -------------------------------------------------------------------------------
	//----------------------------------------------------------------------------------------
signals:
		void sigAcquire();
		void sigScanDrive();
		void sigLineScanAcq();
		void sigAcqLifetimeData();
		void sigStopScanDrive();
		void sigAomControlOn(double voltage);
		void sigAomControlUpdate(double voltage);
		void sigAomControlOff();
		double sigUpdateLineRateField();
		double sigUpdateLineScanSpeed();
		double sigUpdateMemoryNeeded();
		void sigContAcqCallback();
		void sigStopContAcqCallback();
		void sigParkBeam();
		void sigUpdateIntensityScaling(short ch1Min, short ch1Max, short ch2Min, short ch2Max);
		void sigUpdateAomTimer();
		void sigUpdateNumZSteps(double zStopPos, double zStartPos, double zStepSize);
		void sigSaveImageLoc(double x,double y,double z);
		void sigSavePointLoc(double x,double y,double z);
		void sigGoToLoc(QTreeWidgetItem entry, double coarse, double zMoveTo);
		void sigZSetOrigin(double z, QTreeWidget *tree);
		void sigStopAcq();
		void sigRotateGalvos();
		void sigConnectZCom(int port);
		void sigConnectXYCom(int port);
		void sigViewVisionTools();
		void sigViewImageOne();
		void sigViewImageTwo();
		void sigSetXYOrigin(double xPos,double yPos, QTreeWidget* tree);
		void sigCoarseUp(double coarsefield,double yPos);
		void sigCoarseDown(double coarsefield,double yPos);
		void sigCoarseLeft(double coarsefield,double xPos);
		void sigCoarseRight(double coarsefield,double xPos);
		void sigFineUp(double finefield, double yPos);
		void sigFineDown(double finefield, double yPos);
		void sigFineLeft(double finefield, double xPos);
		void sigFineRight(double finefield, double xPos);
		void sigZStepUp(double stepSize);
		void sigZStepDown(double stepSize);
		void sigZMoveTo(double moveToPos);
		void sendAomClassData(AomControl* aomClass);
		void sendAcqClassData(AcqEngine acqClass);
		void sendScanClassData(ScanEngine* scanClass);
		void sendDataClassData(DataFile2P dataClass);
		void sendZStepClassData(zStepperDriver zStepClass);
		void startAcq(const QString &);
                void sigResetLTAcqNum(int num);
private:

	//private members
	char			errBuff[2048];
	int 			displayWinNum1;
	int 			displayWinNum2;
	double			arrayMin, arrayMax;
	unsigned int*	histArray1;			// Hist values array chan 1
	unsigned int*	histArray2;			// Hist values array chan 2
	short*			binsArray;			// Hist axis array
	unsigned long	mag;
	Image*			image1;				//Pointer to Image object for display
	Image*			image2;				//Pointer to Image object for display
	unsigned int*	imageData1;			//Data to use to make the image1
	unsigned char*	imageData2;			//Data to use to make the image2
	Point			posWindow1;			//NI Vision data type. Position of window1
	Point			posWindow2;
	QSignalMapper*	signalMapper;


};

#endif
